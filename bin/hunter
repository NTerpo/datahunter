#!/usr/bin/env ruby

require 'datahunter'
require 'rubygems'
require 'json'
require 'commander/import'
require 'rest_client'
require 'launchy'
require 'colorize'
require 'downloadr'

program :name, 'Hunter'
program :version, Datahunter::VERSION
program :description, 'Find an download Open Datasets directly from your terminal'
program :help_formatter, :compact

command :find do |c|
  c.syntax = 'hunter find keyword [spatial-coverage] [temporal-coverage]'
  c.summary = 'Displays the datasets corresponding to the query'.colorize(:blue)
  c.description = c.summary
  c.action do |args, options|

    start_time = Time.now
    
    if args[0].nil?
      puts "usage: $ hunter find keyword [geo] [temp]"
    elsif

      query = args.join(" ")
      url = Datahunter.datasets_url query
      response = RestClient.get(url, :content_type => :json) do |response, request, result, &block|
        elapsed_time = Time.now - start_time
        
        case response.code
        when 200
          datasets = JSON.parse(response.body) #.reverse
          number_of_datasets = datasets.length
          
          puts "### Response in #{elapsed_time} seconds".colorize(:blue)
          puts "### We've found #{datasets.size} datasets corresponding to your query '#{query}':".colorize(:blue)
          puts
          
          for i in 1..(number_of_datasets/5 +1)
            sub_datasets = datasets[(5 * i - 5) .. (5 * i - 1)]
          
            Datahunter.print_coll_of_datasets_info_light sub_datasets

            puts ("### Get data? (1..5) ".colorize(:yellow) +
                  "Show next 5 datasets? (RET) ".colorize(:cyan) +
                  "abort? (q)")
            case ask "> "
            when '1'
              Datahunter.get_dataset sub_datasets[0]
              break
            when '2'
              Datahunter.get_dataset sub_datasets[1]
              break
            when '3'
              Datahunter.get_dataset sub_datasets[2]
              break
            when '4'
              Datahunter.get_dataset sub_datasets[3]
              break
            when '5'
              Datahunter.get_dataset sub_datasets[4]
              break
            when 'q'
              break
            else
              next
            end
          end
        when 204
          Datahunter.print_no_dataset_message
          Datahunter.print_request_dataset_message
        else
          response.return!(request, result, &block)
        end
      end
    end
  end
end

command :info do |c|
  c.syntax = 'hunter info <id>'
  c.summary = 'Displays all the informations about a dataset given its id'.colorize(:blue)
  c.description = c.summary
  c.action do |args, options|

    if args[0].nil?
      puts "usage: $ hunter info <id>"
    else
      url = Datahunter.ds_url(args[0])
      response = RestClient.get(url, :content_type => :json) do |response, request, result, &block|

        case response.code
        when 200
          ds = JSON.parse(response.body)
          puts
          Datahunter.print_dataset_info ds
        when 400
          puts "Invalid ID".colorize(:red)
        end
      end
    end
  end
end

command :get do |c|
  c.syntax = 'hunter get <id>'
  c.summary = 'Downloads a dataset given its id'.colorize(:blue)
  c.description = c.summary
  c.action do |args, options|

    if args[0].nil?
      puts "usage: $ hunter get id"
    else
      url = Datahunter.ds_url(args[0])
      response = RestClient.get(url, :content_type => :json) do |response, request, result, &block|

        case response.code
        when 200
          ds = JSON.parse(response.body)
          puts
          Datahunter.get_dataset ds
        when 400
          puts "Invalid ID".colorize(:red)
        end
      end
    end
  end
end

command :about do |c|
  c.syntax = 'hunter about'
  c.summary = 'Gives Hunter\'s vision, the number of datasets indexed etc'.colorize(:blue)
  c.description = c.summary
  c.action do |args, options|
    puts "
Find and download Open Datasets        ....8888888888888888888888888888888.....
directly from the terminal!            ...888888888888888888888888888~88888?...
                                       ..88888...888888888888888888..+888888...
We believe there will be more          .888888.=....................O78888888..
and more data available on the web     ?888888.......................Z88888888.
and the main issue will be to find     8888888.......................888888888.
them and to manage each source.        8888888.......................888888888.
                                       8888888:......8O.......88.....888888888.
                                       88......ZO.....8=.....Z8.....8888888888.
                                       $.........:8...............888888888888.
So we try to show you the way!         ............8.............8888888888888.
                                       ..............O.........:88888888888888.
                                       ...............8........88888888888888..
                                       ................O......8.......888888...
                                        ................8.88.8.........=8887 ..
indexed datasets: 8336                 . ................8888...........?8.....
last dataset: DAMIR french health      .. ...........................8888......".colorize(:red)
    puts
    puts "### Hunter is still a prototype, please don't hesitate to help us make open datasets workflow better!".colorize(:blue)
    Datahunter.print_feedback_request
  end
end

command :guide do |c|
  c.action do
    puts ('$ hunter find <keyword> <spatial coverage> <temporal coverage> '.colorize(:blue) + "\n" +
          'Datasets corresponding to your query, sorted by popularity, '\
          'displayed 5 by 5. Search ~> Find ~> Get the data!')
    puts
    puts ('$ hunter info <id>'.colorize(:blue) + "\n" +
          'Display all the informations about a dataset given its id: '\
          'complete description, publisher, last update, etc')
    puts
    puts ('$ hunter get <id>'.colorize(:blue) + "\n" +
          'Get a dataset given its id: '\
          'if possible download the data, if not, it opens the web page '\
          'from where it will be possible')
    puts
    puts ('$ hunter about'.colorize(:blue) + "\n" +
          'About Hunter, the vision, number of datasets indexed etc')
  end
end
default_command :guide
